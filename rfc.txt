======[Request for Comments]======
-----[RFC 1]-----
Date: December 08, 2016
Author: Zhu Zhan Yan

While reading the code for the Android project, I found some questionable
methods lying around in the DateTime class:

DateTime.getMillis() - The class description only mentions that the accuracy if
the data type is only down to the minute however this outputs date/time in
milli-seconds.

DateTime.setHasDate()
DateTime.setHasTime() - These setters set Status Variables (Variables that vary
according to current data). What if someone called on of these methods while
internal datetime did not have time? At Least make them private.

Also the Duration class should not be Deprecated and should at least acts as an
abstraction for the current class used (org.joda.time.Period). 

-----[RFC 2]-----
Date: December 08, 2016
Author: Joel Tio Jin Hon

Do note that Datetime and DateTime are two separate classes. Datetime is
Skeem's implementation of date and time while DateTime is jodatime's
implementation of date and time.

Datetime.getMillis()
The Datetime class's comment for the accuracy of the data type was not fully
updated after I have switched from the deprecated classes to the new jodatime
library. Hence, the description only says the accuracy of the class is down to
a minute. Previously, it was down to a minute due to its smaller use scope.
However, the class has an expanded use scope for calculations of the time as
well. By having accuracy down to milliseconds, division of timeblocks is more
feasible.

Datetime.setHasDate() and Datetime.setHasTime()
These functions have their uses and should not be kept private. They are used
to indicate if date and time values are present in the class. The use case is
when setting date and time values that can be disabled. Instead of removing the
date and time completely, the class continues to store the date and time values
but the flags indicate that they do not exist. For example, when setting a
task's deadline, it has an optional time field. The user sets a time but
changes they're mind and disables it. The flag shows that it does not have time
although it does.

Of course, if you were to just set no date and time but indicate true for the
variables, it will show up Unix Epoch, hence there you need to be careful not
to set these flags wrongly. 

You should note, however, that keeping it private will prove no use either, the
other methods in the class do not rely on these methods to change the flags;
they set the flags directly.

Deprecation of Duration
Providing a layer of abstraction does not prove much use. JodaTime's Period
class provides almost the same functionality as Duration had when it was
implemented. The methods that Duration used to have are also present in
Period. Another thing to note is that JodaTime already has a class called
Duration as well, bringing back the Duration class can cause conflict.

-----[RFC 3]-----
Date: December 10, 2016
Author: Zhu Zhan Yan

Datetime.setHasDate() and Datetime.setHasTime()
Previously, you mentioned that "it has its uses" so I searched for uses of
these methods and found some questionable use cases:
[BEGIN Java Code]
voidblock.getScheduledStart().setHasDate(
    voidblock.getScheduledStart().getHasTime());
voidblock.getScheduledStop().setHasDate(
    voidblock.getScheduledStop().getHasTime());
[END Java Code]
How is having time related to having date?
I am clueless to what this code is supposed to do. Please explain.
[BEGIN Java Code]
// Reset the "from" and "to" date and time values
voidblock.getScheduledStart().setHasDate(false);
voidblock.getScheduledStop().setHasDate(false);
[END Java Code]
This can be replaced with something that makes more sense:
[BEGIN Java Code]
voidblock.setScheduledStart(new Datetime());
voidblock.setScheduledStop(new Datetime());
[END Java Code]
My point is that these variables must reflect the current presence of date or
time in the date time object. Providing this method is an invitation for bugs.

Deprecation of Duration
Providing a layer of abstraction is important to ensuring that the application 
would maintainable if we depend on things we cannot control such as in this
case the JodaTime Library.  What if we wanted to adapt another library? What if
the amended their public interface? Are we going to track down every reference
to library in the entire application? Adding a layer of abstraction ensures
that the references and dependence on the library stays inside a object, such
that in case we want to do the above things, we could do them easily. Personal
experience for depending on a certain library without a layer of abstraction
proved to be a headache when Apple Changed their NSDate,NSString,NSCalendar...
class to Date,String,Calendar... class and shortened most method names.

I can redevelop the duration class and migrate the code base from 
org.joda.time.Period, I just need the go ahead.

I have introduced some refactoring work on the rftr branch, take a look
and use git cherry-pick to introduce the refactoring if good enough.

-----[RFC 4]-----
Date: December 12, 2016
Author: Joel Tio Jin Hon

Datetime.setHasDate() and Datetime.setHasTime()
I will explain further what I mean by its uses. I think a clearer way to name
these methods could be "setDisplayDate" and "setDisplayTime" for the cases you
have brought up. The first example that you raised was in the
VoidblockCreateActivity java file. At that part of the file, it is checking to
see what to do with the new repeated days it has received. There are a few
cases to consider:
    1. The user has not set the date and time but has set a day to repeat
    2. The user has set the date and time and has set a day to repeat
    3. The user has not set the date and time and has not set a day to repeat
    4. The user has set the date and time but has not set a day to repeat
When a repeated day is set, you would want to remove the date if it is set.
If the user removed all the repeated days, you would want to show the date
again.

With that in mind, for the first example use you have given, it falls into case
3 and 4. What it basically is trying to say is "Show back the date if the user
has set something into the start and stop date times previously.". This would
not be possible if the user's previously set date is reset (your second
recommended example), what would happen is it will just give Epoch date which
destroys the safeguards (as the safeguards only check when setting).

For your second example given, it is used to hide the dates but not completely
reset them as I have mentioned above. The reason behind hiding them are, also
as above, to retrieve them when you need to display them again.


Deprecation of Duration
I understand the purpose now, you have my green light. In fact, the more recent
java versions support time better, JodaTime is a library for older java
versions that cannot do time as well. (java.time library actually incorporated
the features from JodaTime)


RFCs
Just to implement a general styling guide, I feel that we should keep to 80
characters maximum and have two newlines between each subject of 
recommendation so that we can have sub-paragraphs.

-----[RFC 5]-----
Date: December 16, 2016
Author: Zhu Zhan Yan

Datetime.getmillis()
There seems to be a possible bug here:
[BEGIN Java Code]
period = period.withDays(this.getDay());
period = period.withMonths(this.getMonth());
period = period.withYears(this.getYear());
[END Java Code]
The documentation for the with*() methods is 'Returns a **NEW** period with 
specified amount of (Days, Months, Years).' It seems that you were trying 
to add time to the period, which are providied by the plus*() methods.


Task && VoidBlock
How does the Task ecosystem work? How do you differentiate repetitive tasks
and non repetitive tasks/void blocks? Using a method to get repetitive 
asks/void blocks seems weird. A task object should not be able to generate
task objects?

Timeblock
How are these generated from void blocks? It would be to name them 
ScheduleableBlock/Duration instead?


The New Duration Class and Tests
I finished implementing and testing the new Duration class, smallest time
interval is 1 millisecond, supports construction, addition, subtraction using
millisecond, second, minute, hours. However I hit a roadblock. The
org.joda.Period class has a whopping 66 uses. And there are no tests for those
classes that use the Period class. Which means if I migrate, I have no way of
determining I broke something. This project is way to big to avoid writing
tests. If you are stalling because you face a problem that is too hard? Why not
write tests, which are simple to write, and helps you obtain certainty of what
components work or what does not work. I can write tests for these classes:
Datetime, Scheduleable, Task, Timeblock, VoidBlock, Weekdays. Could you write
for the rest? UI Classes can be omitted for now.
 

Schedule (Literal)
We need to work out a schedule to finish to the app fast. The holidays, which
is the prime time to develop the App is about 3/4 finished. So for now, write
tests and fix bugs. We need to work out a Schedule to finish the app as soon as
I return to Singapore only 20/12/2016.

-----[RFC 6]-----
Date: December 16, 2016
Author: Joel Tio Jin Hon

Datetime.getMillis()
The issue that you raised is not a bug or at least all of my logic points in
that direction. Why I said that it was based on my logic was because the
documentation states that it returns a new period with the new value added.
This could mean two different things. It could either mean that it returns
"5 months" when you do period.withMonths(5) whatever period is or it could mean
to set the value of months to 5 (which makes more sense). After you raised this
possible bug, I did a test and found that it was the latter, so there is no
bug. However, since I created a new Period before doing all this, adding or
setting does not make a difference.


I am not sure what you mean by a "Task ecosystem" but I will just follow along
your other questions. To differentiate between a repetitive task and a
non-repetitive task, you would have to get the weekdays that it repeats and
check if it is empty.

I used a method to get all the repeated tasks separately for scheduling. For
storage, it would be better to keep them individually.


Timeblock
Timeblocks are generated from voidblocks by getting the latest deadline of all
the tasks and filling this span of time with voidblocks. The rest of the gaps
would be timeblocks. Renaming it to SchedulableBlock or Duration seems a bit
weird since we have voidblocks and the opposite of voidblocks is more like
timeblocks instead of SchedulableBlock. Duration also can conflict with
odaTime's Duration.


The New Duration Class and Tests
Tests are good but at the current moment, I can still move forward without TDD,
the classes have not gone to that big of a scale. I will put tests to second
priority to actual progress. Although JodaTime's Period class has so many uses,
when I migrate, I usually look through all of the code to check for any uses.

Datetime and Duration equals method
It seems excessive to have to equate every value given in the fields. You
could, instead, use the toString method and just equate that.

Commits
While I was testing today, I tried to build the project and it failed. I
checked the error and it turns out that the android manifest and gradle files
were pointing to the wrong package. It was set to "sstinc.sstinc.skeem" instead
of "sstinc.skeem". Almost all of them. I checked the origins of the error on
git and it was done during the name migration commit (8 December!).

Another thing that prevented the build was changing the access modifiers in
Schedulable from local (which is nothing) to private. If you build it, it
throws an error. The reason I kept it to local was so that subclasses can
access it (which they do). This is in one of the commits of rftr, it does not
affect dev.

The point is, everytime before you commit, test your code. Try to build it, if
it is a test, test the test. Does it work? If it does, commit. If it doesn't,
fix.

-----[RFC 7]-----
Date: December 17, 2016
Author: Zhu Zhan Yan

Commits
Apologizes for breaking the project, will note to try build the project next 
time, regarding the change of access modifiers, I think my brain malfunctioned,
or I wrote Too much swift code, where everything in the same file can access 
all privates in the same file. It should be changed to protected right?

Name Conflicts
Simple solution to conflicting with JodaTime's classes, remove the import 
statements.

Tests && TDD
To be clear, I was not advocating for TDD, I am advocating for certainty. Given 
that we have ~15 days left, we won't want to have an bug pop up in the most 
inconvenient of times. When that happens we won't know if the bug is a simple 
isolated one or multiple things breaking all together. We need bugs come up now. 
Not when we are about to deploy it on the Play Store.

In the same spirit as the "Test before Committing" section in the your previous
RFC, it instead of just making sure it complies, how about running the Test 
suite to make sure your code runs as expected and you didn't introduce any 
bugs?  I kept refactoring on a separate branch because I was not certain I was 
not going to break anything.

TDD is a style of development where failing test is written first, only just 
enough code is written to pass the test, just enough test is written to fail 
and so on, until you have the finished product. That would take a really long 
time. 

I am not asking for that, I am just asking for certainty.
Write tests to make sure  that the model classes (Task, VoidBlock, TimeBlock, 
Scheduler, DateTime,...) classes behave as expected, UI classes can be tested 
manually. You say that you prefer "actual progress", but is it really actual 
progress, or have you written your next debugging nightmare? Only with a 
passing test would you be certain. 

Over the next three days (17-20/12/2016) I would develop tests for these 
classes:
Datetime
Schedulable
Task
Scheduler
Timeblock
Voidblock
Weekdays
It would be great if you can write tests for the non-UI classes.
I won't force (I can't) you to write tests. It just would be better if we had
them.


Datetime & Duration Equals method
You seem to be okay with jumping through hoops to just make sure the Object 
already equal. The equals method saves me typing and does not create a new 
dependency on the toString() to encode every field in the object. If someone 
touches that toString() method, great, now all code comparing objects of that 
type is new bug. Worse still  all types of the fields must be a primitive type 
or support a toString() method which also must encode all fields in that objects
as well.

Migrating from JodaTime's Period to Duration && Refractoring
Without tests, I would not be able to migrate without knowing if I introduced
bugs or not. So that task would be postponed for now, until we have an concrete
test suite.

Necessary improvements to the code, such as Refractoring, are also avoided due 
to the fear of breaking something. This can be averted with a test suite. 
I can simply run the tests and know for certain that nothing is broken.


Tasks && DRY
So the way to determine if the task is repetitive is not in a method? If not so
ignore the following text. Else, think about having to maintain multiple complies
of the  same code (possibly with the same bugs). If you had a method to do the
same thing. The maintenance would only be in one place (and any bugs).
Thus, try to follow the DRY principle: Don't Repeat Yourself. Or suffer later.


Conclusion
Testing gives certainty, It is not a waste of Time. It would be great if you
could write some. Try to follow the DRY principle.
-----
