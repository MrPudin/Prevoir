------- Skeem Object Diagram ------
[Model]
!!!** Date/Time in ALL model objects are represented as seconds since the unix epoch **!!!
Repetition
=====
(public)
- offset - offset in seconds before the the very first interation.
- stopdate - repeat until this "stop" date.
- interval - interval loop that defines the interval between each repetition
- vaild() - Whether the repetition object is vaild
- next_repeat() - Returns the date/time of the next repetition

(private)
- prevdate - Object previous interation date state.
- pointer - Keep track we are in the interval loop

Schedulable
=====
(public)
- name - Name of the schedulable
- describe - Description of the schedulable
- duration  - The duration of the schedulable
- tags - Tags of the schedulable
- repeat - Repetition object that describes how the schedulable repeats
- weight() - The importance of the schedulable

Task - Subclass>Schdulable
=====
(public)
- deadline - Date/time defining when the task MUST be completed

Interrupt - Subclass>Schdulable
=====
(public)
- begin - Date/time defining when the break starts

Tag
=====
(public)
- name - The name of the tag
- weight - The user defined importance given by the tag to tasks.

[Scheduling]
Schedule
====
(public)
- switch(algorithm) - switch schedule algorithm
- add(schedulable) - add schedulable
- remove(schedulable) - remove schedulable
- update(schedulable) - update schedulable
- commit(genesis) - Commits changes and creates schedule starting from genesis
- size() - Retrieves the total number of internal schedulable objects
- duration() - Retrieves the total of internal schedulable objects
- begin() - schedule iterator pointing to start of schedule
- end() - schedule iterator pointing to start of end

(private)
- invaildate() - Invaildate internal object state
- limit() - Determine the schedule date INCLUSIVE limit
            (ie latest date that it cares about)
- unroll() - Unroll/Expand out repetitive into flat single only schedulables. 
            (ie the ones that repeat)
- generate() - Generate the schedule from flatted schedulables and algorithm

Schedule iterator
====
(public)
- next() - retrieve next schedulable iterator
- prev() -  retrieve previous schedulable iterator
- value() - retrieve schedulable that iterator points to (ie dereference pointer)
*Class Methods*
+ iterate(schedule, pointer) - Return iterator that with specified pointer (ie index)
+ invaildate() - Invaildate all Schedule Iterators

SchedulingOrder
- Defines the order (after sorting) which tasks presented to the scheduling 
  algorithm to be scheduled
====
- sequential - Each task is presented and represented for scheduling until the
               task is complete scheduled, where it would then move on to the 
               next task, until all task have been scheduled.
- cyclic -  Each task is presented once for scheduling in each iteration, which 
            loops until all tasks are scheduled
- dynamic - The tasks are sorted, then the top task is picked for scheduling, 
            after scheduling, the tasks are sorted again, and top scheduled and 
            so on until all task are scheduled.
            

SchedulingAlgorithm
====
- order() - Tells the scheduler how the tasks should be arranged or order before
            or after sorting, supported order(s) are defined in SchedulingOrder
- compare(lhs, rhs) - Compare function used to sort the schedulables before
                    scheduling to create a specific order each scheduable is 
                    scheduled.
- schedule(task, avail_time):
    - Schedule function used to determine the duration to schedule given task
      given the maximumn available time left that can be scheduled.
